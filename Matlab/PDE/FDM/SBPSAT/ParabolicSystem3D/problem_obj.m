classdef problem_obj
    % problem object
    % ut + Aux + Buy = e(Cuxx + Duyy)
    %       Hu = g
    %        u = f
    
    properties
        % Parameters
        cont;    % Structure with continuous matrices: a, ax, b, by, c, d
        disc;    % Structure with discrete matrices: A, Ax, B, By, C, D
        epsilon; % epsilon
        dim;     % dimension of system
        
        % Problem type
        type;   % Type: problem type, data type, coeff type
        
        % Transformation
        Trans   % Transformation:
        
        % Data
        data;  % Boundary data: gE, gED, gW, gWD, ...
        
        % Matrices
        Lambda; % Eigenvalue matrices
        X;      % Eigenvectors: C_plus, C_minus, D_plus...
        tilde;  % Matrices: X'CX, X'DX, ...
        
        
    end
    methods
        function obj = initialize(obj)
            
            obj = initializeProblem(obj);
            obj = initializeData(obj);
            
        end
        function obj = initializeProblem(obj)
            
            if strcmp(obj.type.problem, 'Navier-Stokes3D')
                
                obj.epsilon = 0.01;
                obj.dim     = 5;
                ubar        = 1;
                vbar        = 1;
                wbar        = 1;
                rhobar      = 1;
                cbar        = 2;
                gamma       = 1.4;
                lam         = -2/3;
                mu          = 1;
                Pr          = 0.7;
                
                obj.cont.a = [ubar cbar / sqrt(gamma) 0 0 0; ...
                    cbar / sqrt(gamma) ubar 0 0 cbar * sqrt((gamma - 1)/gamma); ...
                    0 0 ubar 0 0; ...
                    0 0 0 ubar 0; ...
                    0 cbar * sqrt((gamma - 1)/gamma) 0 0 ubar];
                
                obj.cont.b = [vbar 0 cbar / sqrt(gamma) 0 0; ...
                    0 vbar 0 0 0; ...
                    cbar / sqrt(gamma) 0 vbar 0 cbar * sqrt((gamma - 1)/gamma); ...
                    0 0 0 vbar 0;
                    0 0 cbar * sqrt((gamma - 1)/gamma) 0 vbar];
                
                obj.cont.c = [wbar 0 0 cbar / sqrt(gamma) 0; ...
                    0 wbar 0 0 0; ...
                    0 0 wbar 0 0; ...
                    cbar / sqrt(gamma) 0 0 wbar cbar * sqrt((gamma - 1)/gamma); ...
                    0 0 0 cbar * sqrt((gamma - 1)/gamma) wbar];
                
                obj.cont.D11 = [0 0 0 0 0; ...
                    0 (lam + 2 * mu) / rhobar 0 0 0; ...
                    0 0 mu 0 0; ...
                    0 0 0 mu 0; ...
                    0 0 0 0 gamma * mu / (Pr * rhobar)];
                
                obj.cont.D22 = [0 0 0 0 0; ...
                    0 mu 0 0 0; ...
                    0 0 (lam + 2 * mu) / rhobar 0 0; ...
                    0 0 0 mu 0; ...
                    0 0 0 0 gamma * mu / (Pr * rhobar)];
                
                obj.cont.D33 = [0 0 0 0 0; ...
                    0 mu 0 0 0; ...
                    0 0 mu 0 0; ...
                    0 0 0 (lam + 2 * mu) / rhobar 0; ...
                    0 0 0 0 gamma * mu / (Pr * rhobar)];
                
                obj.cont.D12 = [0 0 0 0 0; ...
                    0 0 lam/rhobar 0 0; ...
                    0 mu/rhobar 0 0 0; ...
                    0 0 0 0 0; ...
                    0 0 0 0 0];
                
                obj.cont.D21 = [0 0 0 0 0; ...
                    0 0 mu/rhobar 0 0; ...
                    0 lam/rhobar 0 0 0; ...
                    0 0 0 0 0; ...
                    0 0 0 0 0];
                
                obj.cont.D13 = [0 0 0 0 0; ...
                    0 0 0 lam/rhobar 0; ...
                    0 0 0 0 0; ...
                    0 mu/rhobar 0 0 0; ...
                    0 0 0 0 0];
                
                obj.cont.D31 = [0 0 0 0 0; ...
                    0 0 0 mu/rhobar 0; ...
                    0 0 0 0 0; ...
                    0 lam/rhobar 0 0 0; ...
                    0 0 0 0 0];
                
                obj.cont.D23 = [0 0 0 0 0; ...
                    0 0 0 0 0; ...
                    0 0 0 lam/rhobar 0; ...
                    0 0 mu/rhobar 0 0; ...
                    0 0 0 0 0];
                
                obj.cont.D32 = [0 0 0 0 0; ...
                    0 0 0 0 0; ...
                    0 0 0 mu/rhobar 0; ...
                    0 0 lam/rhobar 0 0; ...
                    0 0 0 0 0];
                
            elseif strcmp(obj.type.problem, 'constant1')
                
                obj.epsilon = 0.01;
                obj.dim     = 2;
                
                obj.cont.a = [4 0; 0 2];
                
                obj.cont.b = [2 1; 1 2];
                
                obj.cont.c = [3 1; 1 3];
                
                obj.cont.D11 = eye(2);
                
                obj.cont.D22 = 2*eye(2);
                
                obj.cont.D33 = 3*eye(2);
                
                obj.cont.D12 = [2 1; 1 2];
                
                obj.cont.D21 = [2 1; 1 2]';
                
                obj.cont.D13 = [3 1; 1 3];
                
                obj.cont.D31 = [3 1; 1 3]';
                
                obj.cont.D23 = [4 1; 1 4];
                
                obj.cont.D32 = [4 1; 1 4]';
                
            end
        end
        function obj = initializeData(obj)
            
            if strcmp(obj.type.data, 'Sin5')
                
                obj.data.u_a   = @(x, y, z, t) ([ ...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t))]);
                obj.data.uT_a  = @(x, y, z, t) ([ ...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t))]);
                obj.data.uX_a  = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0]);
                
                obj.data.uXX_a  = @(x, y, z, t) ([ ...
                    -(2*pi)^2*sin(2*pi*(x - t)) + y*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(x - t)) + y*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(x - t)) + y*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(x - t)) + y*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(x - t)) + y*0 + z*0]);
                obj.data.uYY_a = @(x, y, z, t) ([ ...
                    -(2*pi)^2*sin(2*pi*(y - t)) + x*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(y - t)) + x*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(y - t)) + x*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(y - t)) + x*0 + z*0;...
                    -(2*pi)^2*sin(2*pi*(y - t)) + x*0 + z*0]);
                obj.data.uZZ_a = @(x, y, z, t) ([ ...
                    -(2*pi)^2*sin(2*pi*(z - t)) + x*0 + y*0;...
                    -(2*pi)^2*sin(2*pi*(z - t)) + x*0 + y*0;...
                    -(2*pi)^2*sin(2*pi*(z - t)) + x*0 + y*0;...
                    -(2*pi)^2*sin(2*pi*(z - t)) + x*0 + y*0;...
                    -(2*pi)^2*sin(2*pi*(z - t)) + x*0 + y*0]);
                obj.data.uXY_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uXZ_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uYX_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uYZ_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uZX_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uZY_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
            elseif strcmp(obj.type.data, 'constant5')
                
                obj.data.u_a   = @(x, y, z, t) ([ ...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t]);
                obj.data.uT_a  = @(x, y, z, t) ([ ...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t]);
                obj.data.uX_a  = @(x, y, z, t) ([ ...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t]);
                obj.data.uXX_a  = @(x, y, z, t) ([ ...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t]);
                obj.data.uYY_a = @(x, y, z, t) ([ ...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t]);
                obj.data.uZZ_a = @(x, y, z, t) ([ ...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t]);
                obj.data.uXY_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uXZ_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uYX_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uYZ_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uZX_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
                obj.data.uZY_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0;...
                    0*y + 0*z + x*0]);
            elseif strcmp(obj.type.data, 'Sin1')
                
                obj.data.u_a   = @(x, y, z, t) ([ ...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t)); ...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t))]);
                obj.data.uT_a  = @(x, y, z, t) ([ ...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t)); ...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t))]);
                obj.data.uX_a  = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(x - t)) + y*0; ...
                    2*pi*cos(2*pi*(x - t)) + y*0]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(y - t)) + x*0; ...
                    2*pi*cos(2*pi*(y - t)) + x*0]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(z - t)) + x*0; ...
                    2*pi*cos(2*pi*(z - t)) + x*0]);
                
                obj.data.uXX_a  = @(x, y, z, t) ([ ...
                    -(2*pi)^2*sin(2*pi*(x - t)) + y*0 + z*0; ...
                    -(2*pi)^2*sin(2*pi*(x - t)) + y*0 + z*0]);
                obj.data.uYY_a = @(x, y, z, t) ([ ...
                    -(2*pi)^2*sin(2*pi*(y - t)) + x*0 + z*0; ...
                    -(2*pi)^2*sin(2*pi*(y - t)) + x*0 + z*0]);
                obj.data.uZZ_a = @(x, y, z, t) ([ ...
                    -(2*pi)^2*sin(2*pi*(z - t)) + x*0 + y*0; ...
                    -(2*pi)^2*sin(2*pi*(z - t)) + x*0 + y*0]);
                obj.data.uXY_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0; ...
                    0*y + 0*z + x*0]);
                obj.data.uXZ_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0; ...
                    0*y + 0*z + x*0]);
                obj.data.uYX_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0; ...
                    0*y + 0*z + x*0]);
                obj.data.uYZ_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0; ...
                    0*y + 0*z + x*0]);
                obj.data.uZX_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0; ...
                    0*y + 0*z + x*0]);
                obj.data.uZY_a = @(x, y, z, t) ([ ...
                    0*y + 0*z + x*0; ...
                    0*y + 0*z + x*0]);
            end
        end
        function obj = createMatrices(obj)
            
            % Diagonalization A and B
            [X_A, obj.Lambda.A] = eig(obj.cont.a);
            [X_B, obj.Lambda.B] = eig(obj.cont.b);
            [X_C, obj.Lambda.C] = eig(obj.cont.c);
            
            obj.Lambda.A        = flip(flip(obj.Lambda.A)');
            obj.Lambda.B        = flip(flip(obj.Lambda.B)');
            obj.Lambda.C        = flip(flip(obj.Lambda.C)');

            obj.Lambda.posDimA  = sum(diag(obj.Lambda.A) > 0);
            obj.Lambda.posDimB  = sum(diag(obj.Lambda.B) > 0);
            obj.Lambda.posDimC  = sum(diag(obj.Lambda.C) > 0);
            obj.Lambda.negDimA  = sum(diag(obj.Lambda.A) < 0);
            obj.Lambda.negDimB  = sum(diag(obj.Lambda.B) < 0);
            obj.Lambda.negDimC  = sum(diag(obj.Lambda.C) < 0);
            obj.Lambda.zeroDimA = sum(diag(obj.Lambda.A) == 0);
            obj.Lambda.zeroDimB = sum(diag(obj.Lambda.B) == 0);
            obj.Lambda.zeroDimC = sum(diag(obj.Lambda.C) == 0);

            obj.Lambda.Aplus  = obj.Lambda.A(1:obj.Lambda.posDimA, 1:obj.Lambda.posDimA);
            obj.Lambda.Bplus  = obj.Lambda.B(1:obj.Lambda.posDimB, 1:obj.Lambda.posDimB);
            obj.Lambda.Cplus  = obj.Lambda.C(1:obj.Lambda.posDimC, 1:obj.Lambda.posDimC);
            obj.Lambda.Aminus = obj.Lambda.A(end-obj.Lambda.negDimA + 1:end, end-obj.Lambda.negDimA + 1: end);
            obj.Lambda.Bminus = obj.Lambda.B(end-obj.Lambda.negDimB + 1:end, end-obj.Lambda.negDimB + 1: end);
            obj.Lambda.Cminus = obj.Lambda.C(end-obj.Lambda.negDimC + 1:end, end-obj.Lambda.negDimC + 1: end);
            obj.Lambda.Azero  = zeros(obj.Lambda.zeroDimA);
            obj.Lambda.Bzero  = zeros(obj.Lambda.zeroDimB);
            obj.Lambda.Czero  = zeros(obj.Lambda.zeroDimC);
            
            X_Aplus  = X_A(:, 1:obj.Lambda.posDimA);
            X_Bplus  = X_B(:, 1:obj.Lambda.posDimB);
            X_Cplus  = X_C(:, 1:obj.Lambda.posDimC);
            X_Aminus = X_A(:, end-obj.Lambda.negDimA + 1:end);
            X_Bminus = X_B(:, end-obj.Lambda.negDimB + 1:end);
            X_Cminus = X_C(:, end-obj.Lambda.negDimC + 1:end);
            X_Azero  = zeros(obj.dim, obj.Lambda.zeroDimA);
            X_Bzero  = zeros(obj.dim, obj.Lambda.zeroDimB);
            X_Czero  = zeros(obj.dim, obj.Lambda.zeroDimC);

            obj.Lambda.A = blkdiag(obj.Lambda.Aplus, obj.Lambda.Azero, obj.Lambda.Aminus);
            obj.Lambda.B = blkdiag(obj.Lambda.Bplus, obj.Lambda.Bzero, obj.Lambda.Bminus);
            obj.Lambda.C = blkdiag(obj.Lambda.Cplus, obj.Lambda.Czero, obj.Lambda.Cminus);

            X_A = [X_Aplus, X_Azero, X_Aminus];
            X_B = [X_Bplus, X_Bzero, X_Bminus];
            X_C = [X_Cplus, X_Czero, X_Cminus];

            D11tilde = X_A' * obj.cont.D11 * X_A;
            D22tilde = X_B' * obj.cont.D22 * X_B;
            D33tilde = X_C' * obj.cont.D33 * X_C;
            
            D12tilde = X_A' * obj.cont.D12 * X_A;
            D13tilde = X_A' * obj.cont.D13 * X_A;
            D21tilde = X_B' * obj.cont.D21 * X_B;
            D23tilde = X_B' * obj.cont.D23 * X_B;
            D31tilde = X_C' * obj.cont.D31 * X_C;
            D32tilde = X_C' * obj.cont.D32 * X_C;

            LD11 = -D11tilde * pinv(obj.Lambda.A) * D11tilde;
            LD22 = -D22tilde * pinv(obj.Lambda.B) * D22tilde;
            LD33 = -D33tilde * pinv(obj.Lambda.C) * D33tilde;
            
            LD12 = -D12tilde * pinv(obj.Lambda.A) * D12tilde;
            LD13 = -D13tilde * pinv(obj.Lambda.A) * D13tilde;
            LD21 = -D21tilde * pinv(obj.Lambda.B) * D21tilde;
            LD23 = -D23tilde * pinv(obj.Lambda.B) * D23tilde;
            LD31 = -D31tilde * pinv(obj.Lambda.C) * D31tilde;
            LD32 = -D32tilde * pinv(obj.Lambda.C) * D32tilde;
            
            [X_D11, Lambda_D11] = eig(LD11);
            [X_D22, Lambda_D22] = eig(LD22);
            [X_D33, Lambda_D33] = eig(LD33);
            
            [X_D12, Lambda_D12] = eig(LD12);
            [X_D13, Lambda_D13] = eig(LD13);
            [X_D21, Lambda_D21] = eig(LD21);
            [X_D23, Lambda_D23] = eig(LD23);
            [X_D31, Lambda_D31] = eig(LD31);
            [X_D32, Lambda_D32] = eig(LD32);
            
            X_D11 = X_D11(:, flip(1:end));
            X_D22 = X_D22(:, flip(1:end));
            X_D33 = X_D33(:, flip(1:end));
            
            X_D12 = X_D12(:, flip(1:end));
            X_D13 = X_D13(:, flip(1:end));
            X_D21 = X_D21(:, flip(1:end));
            X_D23 = X_D23(:, flip(1:end));
            X_D31 = X_D31(:, flip(1:end));
            X_D32 = X_D32(:, flip(1:end));

            Lambda_D11 = flip(flip(Lambda_D11)');
            Lambda_D22 = flip(flip(Lambda_D22)');
            Lambda_D33 = flip(flip(Lambda_D33)');
            
            Lambda_D12 = flip(flip(Lambda_D12)');
            Lambda_D13 = flip(flip(Lambda_D13)');
            Lambda_D21 = flip(flip(Lambda_D21)');
            Lambda_D23 = flip(flip(Lambda_D23)');
            Lambda_D31 = flip(flip(Lambda_D31)');
            Lambda_D32 = flip(flip(Lambda_D32)');

            posDimD11  = sum( diag(Lambda_D11) > 1e-10);
            posDimD22  = sum( diag(Lambda_D22) > 1e-10);
            posDimD33  = sum( diag(Lambda_D33) > 1e-10);
            
            posDimD12  = sum( diag(Lambda_D12) > 1e-10);
            posDimD13  = sum( diag(Lambda_D13) > 1e-10);
            posDimD21  = sum( diag(Lambda_D21) > 1e-10);
            posDimD23  = sum( diag(Lambda_D23) > 1e-10);
            posDimD31  = sum( diag(Lambda_D31) > 1e-10);
            posDimD32  = sum( diag(Lambda_D32) > 1e-10);
            
            negDimD11  = sum(-diag(Lambda_D11) > 1e-10);
            negDimD22  = sum(-diag(Lambda_D22) > 1e-10);
            negDimD33  = sum(-diag(Lambda_D33) > 1e-10);
            
            negDimD12  = sum(-diag(Lambda_D12) > 1e-10);
            negDimD13  = sum(-diag(Lambda_D13) > 1e-10);
            negDimD21  = sum(-diag(Lambda_D21) > 1e-10);
            negDimD23  = sum(-diag(Lambda_D23) > 1e-10);
            negDimD31  = sum(-diag(Lambda_D31) > 1e-10);
            negDimD32  = sum(-diag(Lambda_D32) > 1e-10);
            
            obj.Lambda.zeroDimD11 = sum(abs(diag(Lambda_D11)) < 1e-10);
            obj.Lambda.zeroDimD22 = sum(abs(diag(Lambda_D22)) < 1e-10);
            obj.Lambda.zeroDimD33 = sum(abs(diag(Lambda_D33)) < 1e-10);
            
            obj.Lambda.zeroDimD12 = sum(abs(diag(Lambda_D12)) < 1e-10);
            obj.Lambda.zeroDimD13 = sum(abs(diag(Lambda_D13)) < 1e-10);
            obj.Lambda.zeroDimD11 = sum(abs(diag(Lambda_D21)) < 1e-10);
            obj.Lambda.zeroDimD23 = sum(abs(diag(Lambda_D23)) < 1e-10);
            obj.Lambda.zeroDimD31 = sum(abs(diag(Lambda_D31)) < 1e-10);
            obj.Lambda.zeroDimD32 = sum(abs(diag(Lambda_D32)) < 1e-10);
            
            obj.Lambda.D11plus  = Lambda_D11(1:posDimD11, 1:posDimD11);
            obj.Lambda.D22plus  = Lambda_D22(1:posDimD22, 1:posDimD22);
            obj.Lambda.D33plus  = Lambda_D33(1:posDimD33, 1:posDimD33);

            obj.Lambda.D12plus  = Lambda_D12(1:posDimD12, 1:posDimD12);
            obj.Lambda.D13plus  = Lambda_D13(1:posDimD13, 1:posDimD13);
            obj.Lambda.D21plus  = Lambda_D21(1:posDimD21, 1:posDimD21);
            obj.Lambda.D23plus  = Lambda_D23(1:posDimD23, 1:posDimD23);
            obj.Lambda.D31plus  = Lambda_D31(1:posDimD31, 1:posDimD31);
            obj.Lambda.D32plus  = Lambda_D32(1:posDimD32, 1:posDimD32);
            
            obj.Lambda.D11minus = Lambda_D11(end-negDimD11 + 1:end, end-negDimD11 + 1: end);
            obj.Lambda.D22minus = Lambda_D22(end-negDimD22 + 1:end, end-negDimD22 + 1: end);
            obj.Lambda.D33minus = Lambda_D33(end-negDimD33 + 1:end, end-negDimD33 + 1: end);
            
            obj.Lambda.D12minus = Lambda_D12(end-negDimD12 + 1:end, end-negDimD12 + 1: end);
            obj.Lambda.D13minus = Lambda_D13(end-negDimD13 + 1:end, end-negDimD13 + 1: end);
            obj.Lambda.D21minus = Lambda_D21(end-negDimD21 + 1:end, end-negDimD21 + 1: end);
            obj.Lambda.D23minus = Lambda_D23(end-negDimD23 + 1:end, end-negDimD23 + 1: end);
            obj.Lambda.D31minus = Lambda_D31(end-negDimD31 + 1:end, end-negDimD31 + 1: end);
            obj.Lambda.D32minus = Lambda_D32(end-negDimD32 + 1:end, end-negDimD32 + 1: end);

            obj.X.D11plus  = X_D11(:, 1:posDimD11);
            obj.X.D22plus  = X_D22(:, 1:posDimD22);
            obj.X.D33plus  = X_D33(:, 1:posDimD33);
            
            obj.X.D12plus  = X_D12(:, 1:posDimD12);
            obj.X.D13plus  = X_D13(:, 1:posDimD13);
            obj.X.D21plus  = X_D21(:, 1:posDimD21);
            obj.X.D23plus  = X_D23(:, 1:posDimD23);
            obj.X.D31plus  = X_D31(:, 1:posDimD31);
            obj.X.D32plus  = X_D32(:, 1:posDimD32);
            
            obj.X.D11minus = X_D11(:, end-negDimD11 + 1:end);
            obj.X.D22minus = X_D22(:, end-negDimD22 + 1:end);
            obj.X.D33minus = X_D33(:, end-negDimD33 + 1:end);
            
            obj.X.D12minus = X_D12(:, end-negDimD12 + 1:end);
            obj.X.D13minus = X_D13(:, end-negDimD13 + 1:end);
            obj.X.D21minus = X_D21(:, end-negDimD21 + 1:end);
            obj.X.D23minus = X_D23(:, end-negDimD23 + 1:end);
            obj.X.D31minus = X_D31(:, end-negDimD31 + 1:end);
            obj.X.D32minus = X_D32(:, end-negDimD32 + 1:end);

            obj.disc.A   = obj.Lambda.A;
            obj.disc.B   = obj.Lambda.B;
            obj.disc.C   = obj.Lambda.C;
            obj.disc.D11 = D11tilde;
            obj.disc.D22 = D22tilde;
            obj.disc.D33 = D33tilde;
            obj.disc.D12 = D12tilde;
            obj.disc.D13 = D13tilde;
            obj.disc.D21 = D21tilde;
            obj.disc.D23 = D23tilde;
            obj.disc.D31 = D31tilde;
            obj.disc.D32 = D32tilde;
            
        end
        function obj = createData(obj)
                    
            obj.data.gE   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gEDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gEDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gEDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            obj.data.gW   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gWDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gWDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gWDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            obj.data.gN   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gNDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gNDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gNDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            obj.data.gS   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gSDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gSDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gSDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            obj.data.gF   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gFDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gFDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gFDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            obj.data.gB   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gBDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gBDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gBDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            
            obj.data.f    = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            
        end
    end
end