classdef problem_obj
    % problem object
    % ut + Aux + Buy = e(Cuxx + Duyy)
    %       Hu = g
    %        u = f
    
    properties
        % Parameters
        cont;    % Structure with continuous matrices: a, ax, b, by, c, d
        disc;    % Structure with discrete matrices: A, Ax, B, By, C, D
        epsilon; % epsilon
        dim;     % dimension of system
        
        % Problem type
        type;   % Type: problem type, data type, coeff type
        
        % Transformation
        Trans   % Transformation:
        
        % Data
        data;  % Boundary data: gE, gED, gW, gWD, ...
        
        % Matrices
        Lambda; % Eigenvalue matrices
        X;      % Eigenvectors: C_plus, C_minus, D_plus...
        tilde;  % Matrices: X'CX, X'DX, ...
        
        
    end
    methods
        function obj = initialize(obj)
            
            obj = initializeProblem(obj);
            obj = initializeData(obj);
            
        end
        function obj = initializeProblem(obj)
            
            if strcmp(obj.type.problem, 'Maxwell')
                
                obj.dim         = 3;
                ep              = 1;
                mu              = 1;
                obj.cont.s      = [mu 0 0; 0 ep 0; 0 0 ep]; % not used
                obj.cont.a      = [0 0 1; 0 0 0; 1 0 0];
                obj.cont.b      = [0 -1 0; -1 0 0; 0 0 0];
                
            elseif strcmp(obj.type.problem, 'Constant')
                
                obj.dim         = 1;
                obj.cont.a      = eye(1);
                obj.cont.b      = eye(1);
                obj.cont.c      = eye(1);
                
            elseif strcmp(obj.type.problem, 'Constant2')
                
                obj.dim         = 3;
                obj.cont.a      = 4*eye(3);
                obj.cont.b      = 2*eye(3);
                obj.cont.c      = 3*eye(3);
                
            elseif strcmp(obj.type.problem, 'Euler3D')
                
                obj.dim = 5;
                ubar    = 1;
                vbar    = 1;
                wbar    = 1;
                cbar    = 2;
                gamma   = 1.4;
                
                obj.cont.a = [ubar cbar / sqrt(gamma) 0 0 0; ...
                    cbar / sqrt(gamma) ubar 0 0 cbar * sqrt((gamma - 1)/gamma); ...
                    0 0 ubar 0 0; ...
                    0 0 0 ubar 0; ...
                    0 cbar * sqrt((gamma - 1)/gamma) 0 0 ubar];
                obj.cont.b = [vbar 0 cbar / sqrt(gamma) 0 0; ...
                    0 vbar 0 0 0; ...
                    cbar / sqrt(gamma) 0 vbar 0 cbar * sqrt((gamma - 1)/gamma); ...
                    0 0 0 vbar 0; ...
                    0 0 cbar * sqrt((gamma - 1)/gamma) 0 vbar];
                obj.cont.c = [wbar 0 0 cbar / sqrt(gamma) 0; ...
                    0 wbar 0 0 0; ...
                    0 0 wbar 0 0; ...
                    cbar / sqrt(gamma) 0 0 wbar cbar * sqrt((gamma - 1)/gamma); ...
                    0 0 0 cbar * sqrt((gamma - 1)/gamma) wbar];
                
            end
        end
        function obj = initializeData(obj)

            if strcmp(obj.type.data, 'sin2DMaxwell')
                
                obj.data.u_a   = @(x, y, t, s) ([ ...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t))]);
                obj.data.uT_a  = @(x, y, t, s) ([ ...
                    -2*pi*cos(2*pi*(x - t)) + -2*pi*cos(2*pi*(y - t));...
                    -2*pi*cos(2*pi*(x - t)) + -2*pi*cos(2*pi*(y - t));...
                    -2*pi*cos(2*pi*(x - t)) + -2*pi*cos(2*pi*(y - t))]);
                obj.data.uX_a  = @(x, y, t, s) ([ ...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0]);
                obj.data.uY_a = @(x, y, t) ([ ...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0]);
                
            elseif strcmp(obj.type.data, 'Sin')
                
                obj.data.u_a   = @(x, y, z, t, s) ([ ...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t))]);
                obj.data.uT_a  = @(x, y, z, t, s) ([ ...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t))]);
                obj.data.uX_a  = @(x, y, z, t, s) ([ ...
                    2*pi*cos(2*pi*(x - t)) + y*0]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(y - t)) + x*0]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(z - t)) + x*0]);
                
            elseif strcmp(obj.type.data, 'Sin2')
                
                obj.data.u_a   = @(x, y, z, t, s) ([ ...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t))]);
                obj.data.uT_a  = @(x, y, z, t, s) ([ ...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t))]);
                obj.data.uX_a  = @(x, y, z, t, s) ([ ...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0]);
                
            elseif strcmp(obj.type.data, 'constant')
                
                obj.data.u_a   = @(x, y, z, t, s) ([ ...
                    0 + 0*x + 0*y + 1*z + 0*t]);
                obj.data.uT_a  = @(x, y, z, t, s) ([ ...
                    0*x + 0*y + 0*z + 0*t]);
                obj.data.uX_a  = @(x, y, z, t, s) ([ ...
                    0 + 0*x + 0*y + 0*z + 0*t]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    0 + 0*x + 0*y + 0*z + 0*t]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    1 + 0*x + 0*y + 0*z + 0*t]);
                
            elseif strcmp(obj.type.data, 'Sin5')
                
                obj.data.u_a   = @(x, y, z, t, s) ([ ...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t));...
                    sin(2*pi*(x - t)) + sin(2*pi*(y - t)) + sin(2*pi*(z - t))]);
                obj.data.uT_a  = @(x, y, z, t, s) ([ ...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t));...
                    -2*pi*cos(2*pi*(x - t)) - 2*pi*cos(2*pi*(y - t)) - 2*pi*cos(2*pi*(z - t))]);
                obj.data.uX_a  = @(x, y, z, t, s) ([ ...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0;...
                    2*pi*cos(2*pi*(x - t)) + y*0]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0;...
                    2*pi*cos(2*pi*(y - t)) + x*0]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0;...
                    2*pi*cos(2*pi*(z - t)) + x*0]);
                
            elseif strcmp(obj.type.data, 'constant5')
                
                obj.data.u_a   = @(x, y, z, t) ([ ...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t;...
                    x*2 + y*1 + z*1 + 0*t]);
                obj.data.uT_a  = @(x, y, z, t) ([ ...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t;...
                    x*0 + y*0 + z*0 + 0*t]);
                obj.data.uX_a  = @(x, y, z, t) ([ ...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t;...
                    2 + x*0 + y*0 + z*0 + 0*t]);
                obj.data.uY_a = @(x, y, z, t) ([ ...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t]);
                obj.data.uZ_a = @(x, y, z, t) ([ ...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t;...
                    1 + x*0 + y*0 + z*0 + 0*t]);
                
            end
        end
        function obj = createMatrices(obj)

            % Diagonalization A and B
            [~, obj.Lambda.A]   = eig(obj.cont.a);
            [~, obj.Lambda.B]   = eig(obj.cont.b);
            [~, obj.Lambda.C]   = eig(obj.cont.c);
            obj.Lambda.A        = flip(flip(obj.Lambda.A)');
            obj.Lambda.B        = flip(flip(obj.Lambda.B)');
            obj.Lambda.C        = flip(flip(obj.Lambda.C)');

            obj.Lambda.posDimA  = sum(diag(obj.Lambda.A) > 0);
            obj.Lambda.posDimB  = sum(diag(obj.Lambda.B) > 0);
            obj.Lambda.posDimC  = sum(diag(obj.Lambda.C) > 0);
            obj.Lambda.negDimA  = sum(diag(obj.Lambda.A) < 0);
            obj.Lambda.negDimB  = sum(diag(obj.Lambda.B) < 0);
            obj.Lambda.negDimC  = sum(diag(obj.Lambda.C) < 0);
            obj.Lambda.zeroDimA = sum(diag(obj.Lambda.A) == 0);
            obj.Lambda.zeroDimB = sum(diag(obj.Lambda.B) == 0);
            obj.Lambda.zeroDimC = sum(diag(obj.Lambda.C) == 0);

            obj.Lambda.Aplus  = obj.Lambda.A(1:obj.Lambda.posDimA, 1:obj.Lambda.posDimA);
            obj.Lambda.Bplus  = obj.Lambda.B(1:obj.Lambda.posDimB, 1:obj.Lambda.posDimB);
            obj.Lambda.Cplus  = obj.Lambda.C(1:obj.Lambda.posDimC, 1:obj.Lambda.posDimC);
            obj.Lambda.Aminus = obj.Lambda.A(end-obj.Lambda.negDimA + 1:end, end-obj.Lambda.negDimA + 1: end);
            obj.Lambda.Bminus = obj.Lambda.B(end-obj.Lambda.negDimB + 1:end, end-obj.Lambda.negDimB + 1: end);
            obj.Lambda.Cminus = obj.Lambda.C(end-obj.Lambda.negDimC + 1:end, end-obj.Lambda.negDimC + 1: end);
            obj.Lambda.Azero  = zeros(obj.Lambda.zeroDimA);
            obj.Lambda.Bzero  = zeros(obj.Lambda.zeroDimB);
            obj.Lambda.Czero  = zeros(obj.Lambda.zeroDimC);

            obj.Lambda.A = blkdiag(obj.Lambda.Aplus, obj.Lambda.Azero, obj.Lambda.Aminus);
            obj.Lambda.B = blkdiag(obj.Lambda.Bplus, obj.Lambda.Bzero, obj.Lambda.Bminus);
            obj.Lambda.C = blkdiag(obj.Lambda.Cplus, obj.Lambda.Czero, obj.Lambda.Cminus);

            obj.disc.A  = obj.Lambda.A;
            obj.disc.B  = obj.Lambda.B;
            obj.disc.C  = obj.Lambda.C;

        end
        function obj = createData(obj)
            
            obj.data.gE   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gEDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gEDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gW   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gWDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gWDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gN   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gNDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gNDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gS   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gSDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gSDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gF   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gFDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gFDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gFDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            obj.data.gB   = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            obj.data.gBDx = @(x, y, z, t) (obj.data.uX_a(x, y, z, t));
            obj.data.gBDy = @(x, y, z, t) (obj.data.uY_a(x, y, z, t));
            obj.data.gBDz = @(x, y, z, t) (obj.data.uZ_a(x, y, z, t));
            
            obj.data.f    = @(x, y, z, t) (obj.data.u_a (x, y, z, t));
            
        end
    end
end